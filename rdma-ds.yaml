apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rdma-ds
  namespace: kube-system
  # Mark this pod as a critical add-on; when enabled, the critical add-on scheduler
  # reserves resources for critical add-on pods so that they can be rescheduled after
  # a failure.  This annotation works in tandem with the toleration below.
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
  labels:
    k8s-app: rdma-ds-api-endpoint
spec:
  selector:
    matchLabels:
      name: rdma-ds
  template:
    metadata:
      labels:
        name: rdma-ds
    spec:
      hostNetwork: true #exposes port to nodes network
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      # Allow this pod to be rescheduled while the node is in "critical add-ons only" mode.
      # This, along with the annotation above marks this pod as a critical add-on.
      - key: CriticalAddonsOnly
        operator: Exists
      containers:
      - name: rdma-ds
        image: rdma-ds:latest
        imagePullPolicy: IfNotPresent #needed so that it does not try to pull a public image. Image must be in nodes docker image repository
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
      initContainers:
      - name: rdma-ds-init
        image: rdma-ds-init:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        resources:
          limits:
            memory: 2Gi # must set memory limit high b/c mellanox uses a lot, error were seen at 120 VFs, with a limit of 200Mi
          requests:
            cpu: 100m
            memory: 2Gi
  updateStrategy:
    type: RollingUpdate